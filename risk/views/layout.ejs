<!DOCTYPE html>
<html>
  <head>
    <title>Game of Risk</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/vendor/bootstrap/bootstrap-theme.css">
    <link rel="stylesheet" href="/styles/vendor/bootstrap/bootstrap-theme.min.css">
    <link rel="stylesheet" href="/styles/vendor/bootstrap/bootstrap.css">
    <link rel="stylesheet" href="/styles/vendor/bootstrap/bootstrap.min.css">
    <!--STYLES END-->

    <script src = "/socket.io/socket.io.js"></script>
  </head>

  <body>
    <nav class = "navbar navbar-inverse navbar-fixed-top" role = "navigation">
      <div class = "container-fluid">
        <div class = "navbar-header"   id = "risk-logo">
          <a class = "navbar-brand" href = "/">
            <img src = "/images/riskLogo.png" alt = "Risk Logo" width = "40px" height = "30px">
          </a>

          <button class = "navbar-toggle" data-toggle = "collapse" data-target = ".navHeaderCollapse" id = "navbar-button">
            <span class = "icon-bar"></span>
            <span class = "icon-bar"></span>
            <span class = "icon-bar"></span>
          </button>
        </div>

        <div class = "collapse navbar-collapse navHeaderCollapse">
          <% if(!session.authenticated) { %>
            <p class = "navbar-text">
              <a href = "/user/new">Create Account</a>
            </p>

            <form action = "/session/create" method = "POST" class = "navbar-form navbar-right" role = "form">
              <ul class = "nav navbar-nav navbar-right">
                <li>
                  <div class = "form-group nav-input">
                    <input type = "text" class = "form-control" "text" placeholder = "username" name = "username">
                  </div>
                </li>

                <li>
                  <div class = "form-group nav-input">
                    <input type = "password" class = "form-control" "text" placeholder = "password" name = "password">
                  </div>
                </li>

                <li>
                  <div class = "form-group nav-input">
                    <input type = "submit" class = "btn btn-success" value = "Log in">
                    <input type = "hidden" name = "_csrf" value = "<%= _csrf %>">
                  </div>
                </li>
              </ul>
            </form>
          <% } %>

          <% if(session.authenticated) { %>
            <ul class = "nav navbar-nav navbar-right">
              <li>
                <a href = "/game">Play Game</a>
              </li>
          <% } %>

          <% if(session.authenticated && session.User.admin) { %>
              <li>
                <a href = "/user">User Admin</a>
              </li>
          <% } %>

          <% if(session.authenticated) { %>
            <li class = "active">
              <a href = "/user/profile/<%= session.User.id %>"><%= session.User.username %></a>
            </li>
              <li>
                <form action = "/session/destroy" class = "navbar-form navbar-right" role = "form">
                  <div class = "form-group nav-input">
                    <input type = "submit" class = "btn btn-primary" value = "Log out" id = "log-out-button">
                    <input type = "hidden" name = "_csrf" value = "<%= _csrf %>">
                  </div>
                </form>
              </li>
          <% } %>
            </ul>
        </div>
      </div>
    </nav>

    <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/aaa-jquery-1.11.1.min.js"></script>
    <script src="/js/dependencies/aaa-jquery.validate.min.js"></script>
    <script src="/js/dependencies/additional-methods.min.js"></script>
    <script src="/js/dependencies/bootstrap.min.js"></script>
    <script src="/js/dependencies/npm.js"></script>
    <script src="/js/app.js"></script>
    <script src="/js/customValidation.js"></script>
    <script src="/js/server.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
